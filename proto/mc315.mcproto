namespace play315 {
	type sb {
		id : varint

		namespace client {
			variant status {
				id=0x03;
				status : varint;
			};

			variant settings {
				id=0x04;
				locale : string;
				view_distance : byte;
				chat_mode : varint;
				chat_colors : bool;
				skin_parts : ubyte;
				main_hand : varint;
			};

			variant plugin_message {
				id=0x09;
				channel : string;
				message : bytes_eof;
			};

			variant keep_alive {
				id=0x0b;
				timestamp : varint;
			};
		};

		namespace gui {
			variant tab {
				id=0x01;
				command : bool;
				at : bool_optional position;
			};

			variant message {
				id=0x02;
				message : string;
			};

			namespace window {
				variant transaction {
					id=0x05;
					window : byte;
					action : short;
					accepted : bool;
				};

				variant enchant_item {
					id=0x06;
					window, item : byte;	
				};

				variant click {
					id=0x07;
					window : byte;
					index : short;
					button : byte;
					action : short;
					mode : varint;
					item : slot;
				};

				variant close {
					id=0x08;
					window : byte;
				};
			};

			variant resource_status {
				id=0x16;
				status : varint;
			};

			variant held_item {
				id=0x17;
				index : short;
			};

			variant creative_item {
				id=0x18;
				index : short;
				item : slot;
			};

			variant update_sign {
				id=0x19;
				at : position;
				lines : array 4 string;
			};

			variant spectate {
				id=0x1b;
				target : uuid;
			};
		};

		namespace player {
			variant teleport {
				id=0x00;
				teleport_id : varint;
			};

			variant use_entity {
				id=0x0a;
				target, action : varint;

				variant interact {
					action=0;
					hand : varint;
				};

				variant attack {
					action=1;
				};

				variant interact_at {
					action=2;
					x, y, z : float;
					hand : varint;
				};
			};

			variant move {
				id=0x0c;
				x, y, z : double;
				on_ground : bool;
			};

			variant look_move {
				id=0x0d;
				x, y, z : double;
				yaw, pitch : float;
				on_ground : bool;
			};

			variant look {
				id=0x0e;
				yaw, pitch : float;
				on_ground : bool;
			};

			variant ground {
				id=0x0f;
				on_ground : bool;
			};

			variant vehicle_move {
				id=0x10;
				x, y, z : double;
				yaw, pitch : float;
			};

			variant steer_boat {
				id=0x11;
				right, left : bool;
			};

			variant abilities {
				id=0x12;
				flags : byte;
				fly, walk : float;
			};

			variant digging {
				id=0x13;
				status : varint;
				at : position;
				face = byte;
			};

			variant action {
				id=0x14;
				entity, action, jump_boost : varint;
			};

			variant steer {
				id=0x15;
				left, forward : float;
				flags : ubyte;
			};

			variant animate {
				id=0x1a;
				hand : varint;
			};

			variant place_block {
				id=0x1c;
				at : position;
				face, hand : varint;
				x, y, z : float;
			};

			variant use_item {
				id=0x1d;
				hand : varint;
			};
		};
	};

	type cb {
		id : varint

		namespace player {
			variant stats {
				id=0x07;
				data : array varint {
					name : string;
					value : varint;
				};
			};

			variant vehicle_move {
				id=0x29;
				x, y, z : double;
				yaw, pitch : float;
			};

			variant abilities {
				id=0x2b;
				flags : byte;
				fly, walk : float;
			};

			variant combat {
				id=0x2c;
				event : varint;

				variant start {
					event=0;
				};

				variant end {
					event=1;
					duration : varint;
					entity : int;
				};

				variant dead {
					event=2;
					player : varint;
					entity : int;
					message : string;
				};
			};

			variant cooldown {
				id=0x17;
				item, cooldown : varint;
			};

			variant game_state {
				id=0x1e;
				reason : ubyte;
				value : float;
			};

			variant teleport {
				id=0x2e;
				x, y, z : double;
				yaw, pitch : float;
				flags : byte;
				teleport : varint;
			};

			variant respawn {
				id=0x33;
				dimension : int;
				difficulty, gamemode : byte;
				level_type : string;
			};

			variant camera {
				id=0x36;
				target : varint;
			};

			variant health {
				id=0x3e;
				health : float;
				food : varint;
				saturation : float;
			};
		};

		namespace world {
			variant block_break {
				id=0x08;
				at : position;
				stage : byte;
			};

			variant update_tile {
				id=0x09;
				at : position;
				tile : nbt;
			};

			variant block_action {
				id=0x0a;
				action, param : ubyte;
				block : varint;
			};

			variant update_block {
				id=0x0b;
				at : position;
				block : varint;
			};

			variant difficulty {
				id=0x0d;
				difficulty : ubyte;
			};

			variant update_blocks {
				id=0x10;
				x, z : int;
				records : array varint {
					# xz IS INTENTIONAL
					xz, y : ubyte;
					block : varint;
				};
			};

			variant named_sound {
				id=0x19;
				name : string;
				category : int;
				x, y, z : int;
				volume, pitch : float;
			};

			variant explosion {
				id=0x1c;
				x, y, z, r : float;
				records : array int {
					x, y, z : byte;
				};

				# applied to the player
				vx, vy, vz : float;
			};

			variant unload_chunk {
				id=0x1d;
				x, z : int;
			};

			variant chunk {
				id=0x20;
				x, z : int;
				continuous : bool;
				mask : varint;
				data : bytes;
				tiles : array varint nbt;
			};

			variant effect {
				id=0x21;
				effect : int;
				at : position;
				data : int;
				global : bool;
			};

			variant particle {
				id=0x22;
				particle : int;
				far : bool;
				x, y, z, ox, oy, oz, data : float;
				count : int;
				data : bytes_eof;
			};

			namespace entity {
				variant spawn_object {
					id=0x00;
					entity : varint;
					entity_uuid : uuid;
					kind : byte;
					x, y, z : double;
					pitch, yaw : angle;
					data : int;
					vx, vy, vz : short;
				};

				variant spawn_orb {
					id=0x01;
					entity : varint;
					x, y, z : double;
					size : short;
				};

				variant spawn_global {
					id=0x02;
					entity : varint;
					kind : byte;
					x, y, z : double;
				};

				variant spawn_mob {
					id=0x03;
					entity : varint;
					entity_uuid : uuid;
					kind : byte;
					x, y, z : double;
					yaw, pitch, head_pitch : angle;
					v_x, v_y, v_z : short;
					meta : metadata;
				};

				variant spawn_painting {
					id=0x04;
					entity : varint;
					entity_uuid : uuid;
					title : string;
					at : position;
					direction : byte
				};

				variant spawn_player {
					id=0x05;
					entity : varint;
					entity_uuid : uuid;
					x, y, z : double;
					yaw, pitch : angle;
					meta : metadata;
				};

				variant animate {
					id=0x06;
					entity : varint;
					action : ubyte;
				};

				variant status {
					id=0x1b;
					entity : int;
					status : byte;
				};

				variant move {
					id=0x25;
					entity : varint;
					dx, dy, dz : short;
					on_ground : bool;
				};

				variant look_move {
					id=0x26;
					entity : varint;
					dx, dy, dz : short;
					yaw, pitch : angle;
					on_ground : bool;
				};

				variant look {
					id=0x27;
					entity : varint;
					yaw, pitch : angle;
					on_ground : bool;
				};

				variant idle {
					id=0x28;
					entity : varint;
				};

				variant use_bed {
					id=0x2f;
					entity : varint;
					at : position;
				};

				variant destroy {
					id=0x30;
					entities : array varint varint;
				};

				variant remove_effect {
					id=0x31;
					entity : varint;
					effect : byte;
				};

				variant head_look {
					id=0x34;
					entity : varint;
					head_yaw : angle;
				};

				variant meta {
					id=0x39;
					entity : varint;
					meta : metadata;
				};

				variant attach {
					id=0x3a;
					#fixme? better field names
					entity, holding : int;
				};

				variant velocity {
					id=0x3b;
					entity : varint;
					vx, vy, vz : short;
				};

				variant equipment {
					id=0x3c;
					entity, index : varint;
					item : slot;
				};

				variant passengers {
					id=0x40;
					passengers : array varint varint;
				};

				variant collect {
					id=0x48;
					entity, collector, count : varint;
				};

				variant teleport {
					id=0x49;
					x, y, z : double;
					yaw, pitch : angle;
					on_ground : bool;
				};

				variant properties {
					id=0x4a;
					entity : varint;
					properties : array int {
						key : string;
						value : double;
						modifiers : array varint {
							modifier_uuid : uuid;
							ammount : double;
							operation : byte;
						};
					};
				};

				variant effect {
					id=0x4b;
					effect, amplifier : byte;
					duration : varint;
					flags : byte;
				};
			};

			variant border {
				id=0x35;
				action : varint;

				variant size {
					action=0;
					diameter : double;
				};

				variant lerp {
					action=1;
					old_diameter, new_diameter : double;
					speed : varlong;
				};

				variant center {
					action=2;
					x, z : double;
				};

				variant init {
					action=3;
					x, z double;
					old_diameter, new_diameter : double;
					speed : varlong;
					portal_boundary, warn_time, warn_size : varint;
				};

				variant warning_time {
					action=4;
					warn_time : varint;
				};

				variant warning_size {
					action=5;
					warn_size : varint;
				};
			};

			variant compass_center {
				id=0x43;
				at : position;
			};

			variant time {
				id=0x44;
				age, timeofday : long;
			};

			variant sound {
				id=0x46;
				sound, category : varint;
				x, y, z : int;
				volume, pitch : float;
			};
		};

		namespace gui {
			variant boss_bar {
				id=0x0c;
				boss_uuid : uuid;
				action : varint;

				variant create {
					action=0;
					title : string;
					health : float;
					color, divisions : varint;
					flags : ubyte;
				};

				variant remove {
					action=1;
				};

				variant health {
					action=2;
					health : float;
				};

				variant title {
					action=3;
					title : string;
				};

				variant style {
					action=4;
					color, divisions : varint;
				};

				variant flags {
					action=5;
					flags : ubyte;
				};
			};

			variant tab {
				id=0x0e;
				matches : array varint string;
			};

			variant message {
				id=0x0f;
				message : string;
				location : ubyte;
			};

			variant edit_sign {
				id=0x2a;
				at : position;
			};

			namespace window {
				variant transaction {
					id=0x11;
					window : byte;
					action : short;
					accepted : bool;
				};

				variant close {
					id=0x12;
					window : byte;
				};

				variant open {
					id=0x13;
					window : byte;
					kind, title : string;
					size : ubyte;
					variant horse {
						kind="EntityHorse";
						entity : int;
					};
				};

				variant items {
					id=0x14;
					window : byte;
					items : array short slot;
				};

				variant property {
					id=0x15;
					key, value : short;
				};

				variant update {
					id=0x16;
					index : short;
					item : slot;
				};
			};

			variant map {
				id=0x24;
				map : varint;
				scale : byte;
				show_icons : bool;
				icons : array varint {
					icon_type, x, z : ubyte;
				};
				columns : ubyte;

				variant icons {
					columns=0;
				};

				variant data {
					rows, x, z : ubyte;
					data : bytes;
				};
			};

			variant player_list {
				id=0x2d;
				action : varint;

				variant add {
					action=0;
					items : array varint {
						player_uuid : uuid;
						name : string;
						properties : array varint {
							name, value : string;
							signature : bool_optional string;
						}
						gamemode, latency : varint;
						display_name : bool_optional string;
					};
				};

				variant gamemode {
					action=1;
					items : array varint {
						player_uuid : uuid;
						gamemode : varint;
					};
				};

				variant latency {
					action=2;
					items : array varint {
						player_uuid : uuid;
						latency : varint;
					};
				};

				variant display_name {
					action=3;
					items : array varint {
						player_uuid : uuid;
						display_name : bool_optional string;
					};
				};

				variant remove {
					action=4;
					items : array varint uuid;
				};
			};

			variant resource_pack {
				id=0x32;
				url, sha1 : string;
			};

			namespace scoreboard {
				variant display {
					id=0x38;
					location : byte;
					name : string;
				};

				variant objective {
					id=0x3f;
					name : string;
					mode : byte;

					variant create {
						mode=0;
						value, kind : string;
					};

					variant remove {
						mode=1;
					};

					variant update {
						mode=2;
						value, kind : string;
					};
				};

				variant score {
					id=0x42;
					action : byte;

					variant update {
						action=0;
						name, objective : string;
						value : varint;
					};

					variant remove {
						action=1;
						name, objective : string;
					};
				};
			};

			variant held_item {
				id=0x37;
				index : byte;
			};

			variant xp {
				id=0x3d;
				xp_bar : float;
				level, total : varint;
			};

			variant team {
				id=0x41;
				name : string;
				mode : byte;

				variant create {
					mode=0;
					display, prefix, suffix : string;
					flags : byte;
					nametag_visibility, collision : string;
					color : byte;
					players : array varint string;
				};

				variant remove {
					mode=1;
				};

				variant update {
					mode=2
					display, prefix, suffix : string;
					flags : byte;
					nametag_visibility, collision : string;
					color : byte;
				};

				variant add_players {
					mode=3;
					players : array varint string;
				};

				variant remove_players {
					mode=4;
					players : array varint string;
				};
			};

			variant title {
				id=0x45;
				action : varint;
				variant text {
					action=0;
					text : string;
				};

				variant subtitle {
					action=1;
					text : string;
				};

				variant action_bar {
					action=2;
					text : string;
				};

				variant fade {
					action=3;
					fade_in, stay, fade_out : int;
				};

				variant hide {
					action=4;
				};

				variant reset {
					aciton=5;
				};
			};

			variant player_list_text {
				id=0x47;
				header, footer : string;
			};
		};

		namespace client {
			variant plugin_message {
				id=0x18;
				channel : string;
				data : bytes_eof;
			};

			variant kick {
				id=0x1a;
				message : string;
			};

			variant keepalive {
				id=0x1f;
				timestamp : varint;
			};

			variant join_game {
				id=0x23;
				entity : int;
				gamemode : byte;
				dimension : int;
				difficulty, max_players : ubyte;
				level_type : string;
				reduced_debug : bool;
			};
		};
	};
};

